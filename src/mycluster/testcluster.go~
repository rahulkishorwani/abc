package cluster

import (
	"os/exec"
	"syscall"
)
func actualtest(servermainstruct []Servermainstruct) bool {
	
	retval:=false
	i,j,k:=0,0,0

	for i=0; i<len(servermainstruct); i++ {
			
		for j=0; j<len(servermainstruct); j++ {
			
			for k=0; k<2; k++ {
				if(servermainstruct[i].actuallysend[j][k]!=servermainstruct[j].actuallyrecvd[i][k]) {
					break
				}		
			}				
		}
	}
	if(i==len(servermainstruct) && j==len(servermainstruct) && k==2) {
		retval=true
	}


	return retval
}




func testcase1() {
//func TestLargesizebroadcast(t *testing.T) {	
	numberofservers:=0
	numberofservers,_=strconv.Atoi(os.Args[1])
	wg := new(sync.WaitGroup)
    	wg.Add(numberofservers)
	
	sizeofinchan:=20
	sizeofoutchan:=20

	//ffnm := "serverlist" + id + ".xml"
	//myservermainstruct := New(id,sizeofinchan,sizeooutchan,ffnm)
	//go myservermainstruct.Sendtooutbox(id, noofmessagestosend, numberofservers)
	myservermainstruct:=make([]Servermainstruct,numberofservers)
	
	//please start this broadcast string with string "BROADCAST" to get bash output right
	broadcastmsg:="BROADCAST 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"
	
	//please start this broadcast string with string "hello there" to get bash output right
	peermsg:="hello there mQINBE6txjkBEACv71ipnEvKO79OSiGOOa0eiphv1DolHZ3JsgJ0BOtsZqXjy9iwfRR81iyaDdRkE1PfGzi21PKoov7xhC32TeGSHtU2kittk3v9xPUz3aBYtXi1bbdnxqyvPJ7MYi4vfazLVrCVubJ5Fc/vZhCOhhJA3YNA8qp97XD0JNICTxp5yRzRm2gCRY0nQFhYtKlUy8wYfvBjq3iMZiDm3/mel3fitBhOLlAdYsUt9XIQy/dlB80VLtQ8lqKJiYFt3Pdq5ijeOjEUUz3rfpJhWSdU3aCWeinKOSMgsfI+SUW06cpmRhbc4Z9YczNJoJLNjQIVN6LMh98+yXDE5YB3rLZCUyccKIsecOMsZzhSwuVnMrhrmE43c6v7j6p2dI8d9EpCQhfAoEtyYszyrrIAXo1l4cZo1mKHB7gigRlpDWtvUzXRvgMT9xCWqv6E5inOS44A+a90STqxDIjcDfVZ0fgZZggiV5v6F5godhl4Wa0+8BZ39P5PEr0cKkFJJmkXk+DFpzJ5k0t4vCEZE0LVrkZ5VImR6n+U/upQdpRhMRlJDq+aHpfCcrEl7gi+4QzNQtiKfmJrkky/SfZ7NO5paZW4GIaMrHdtOnpqd24rfokHyNi3U4vRklPBOrxbpK64g+7qF+Xo36EqdyHvPsnd+jErHw7rPob33FtSNYY3nbw6MvwARAQABtCRBcnVuIEMuIE11cnRoeSA8YWNtdXJ0aHlAYXBhY2hlLm9yZz6JAjEEEwECABsCGwMCHgECF4AFAk6tx98FCwkIBwMFFQoJCAsACgkQvlqqC6IQwJWE5w/7BGCUf8sqatn/60wITSi2SLTNIvKIgDHMVg8CGgBPc4UHIDF5IUPZMOmaVQNa2iOPwE5vB1NGsFyUumYgPwAkWZxPjv/8oZUK69oB9jG7eRdERnNqk1kNeFkjejp2K1M550Q9tImDIBoJvg9ENclfi7phy9MPI6iQPK8bcbWpE3yEbWsHVdhTVwmmTH4bvLRxSaIg5eFIO1QbfrJHpE5Pz7mVZQFUP77fFYxpNsa/DWZ4CCbkqz9XQIGEFtwvehxnmwS8aMRMYY3dGpgkC5UKKJGMSSbRrsh1mGdMWqv4Vj03leghMc/xl99lOPh58uBNt7Mu+TtJeXwRouDhySUvkqHj1MY6wB7e91KO2w0U0/ZC5VKoSCNoJAj7qBbbM6Wlulfq8+POs4coVR/X78BtJC7ojPkJsAyLXs3nSrrABeSHj5vw/bPxvpfQmI7gmTGAwaAo96gpMJcwstUx1rl0VL4DyHcpMgmGzIeUA1n4nyEXeMLoKTYRevzwVHWJW04vZUrDs7N01JjzquUWq7fLaKSpIeMhhLkpFqPI11bI/dwPIlnSWiZhgppAhkY5auvMLj3nUvTX+elJILPxe8dxHRJIbq+R5DpfYc7GvIcQEBFD7AhnVl9Ce8ZzdrNnU7s+aYh+IxhH4VeLMblPErkCPljUqbcya+5LorrVLwGJARwEEAECAAYFAk6vl0gACgkQJVrfVsNsXw/wAgf9FAOoDjLHt72blYr9HQCkch0DudXdDIkI+UbEDgzto9+jIIXF8MhWFicYvdwop5ZI8UToowOkI0uUcdUb7Yw4xnGh3xWdSevsWhPUFw9NxR8k6jC5zWVKkXQaXaOaKqyFTyiNo86pjmGKk4jUeM0M3UZzg6+agtY879kkshpQ+KeK1QLV4ivcNcLWdJTJ38PtAQaxLgTfxDIytA4oe3oR6pbcdCCmJi5lhApSZabL9rlZf+PwGnUrg2mGBFzudVOIBhciYfmBUDgoqLMDiQ4NQ2OgmBwu0LpmOMCf+FqqvbrK0Yl41ROtqZA6QGd92vJgFyPTO764ITjn+1LA4NFWqokCHAQQAQoABgUCTq4VtAAKCRASCefxPQySuftgD/493RXKCqm4IXo/XpXWKzS4FcUDE/lpEKuXwo7PM2iiUcIMzEGvrzxBHVnuZqw/19SG0Ai8kSZHodRNI3gTkvnNBT1cxmrPhKpLOyUIZo2eYejHzSSHJ5ybQRzsNz8zEVRPfrewqU58FvRpPaRqWv5pkY7gyD7EMT2mn/lE93cshi5K+mZLW9MWmb9ZsOCG8XlGVWozWKkS+TgTwSZWtsqU4t0w8G4QkoeetI5xy2D8RRUz7XrUDXTr3/n++iIM30Jc2Uok0eyXVP32Om+R5UKdRvxEHBMP34vA57o5u5wzEzlIK5O7ax+Bt5JFUrLLUdkHMmmj47FOp2fV73Ixr4R/bdhQzUo0UrIygxf4iYFt26zyoO0V8T+5Smj/RhsKrDcUXLqKDwohpajWkE0xrHVKF16hprnP+extTbK4M4Qd4quouqpSljK5UuWySobEngLToJqVwYwNXLJXHfBFvw5THaw8VX7d8zX1j8UiM0HCj2JgJI0nFAKmD2Xowparw1im/PuQje2H08R8l+XFhxP473xPkbn41ZX61nXe2Efpr4htbBB0TJrF6HvDn+lPAzX6ixPTauU2C4ssXx+vGj1blJ/yXfRcYwn45oMlDsKCZUOhiM88KzCFWJ+0HGfCQJCWYkkjEfVvwOTXJ0hMOBNr1RR9eIMlBESheqWFBNJ/4kCHAQQAQIABgUCT/HnGwAKCRCpu3Nah270O5sWEACGKCK5f6LCxvvjwM9634QXyrjNyEIJ2TBGzLn9WCEZl7k+qshF3hNmIXMEOkkuiYKiDiPM5Ql7VmSwixyjAO0nuDXLVdIwc5WIwENfOP+MV++h9RKt5U5ePgzP/XZ8BLkunGV508YDjDN29lUi3Rhm/MCaVA5NjmRYuSgFhFK95kFvLNqz3eBBB5pjF2tE4vjJw9st1VLo8y2r8JeE6PAvpXFhNMk+SgRR3IeAzE/xo2Jwj73YLajCT9bXTc4VIdcQFnsgi+2c7XR3jrNEVC/59XSqhWlGonp7gP3kiJ5R+G0V+39ff1cvOt4mThecJTcsrENRXkXVTEu2eb+NzNaQNIgd//fcEgShM+8P6C+4wyBlNWbMDTFCm6giU5ttNJyQd6tWPWkyMk8L4lLpBHC2bo6OEBaU5VIXj6yaRIz7r40nlxK+ycaghSnw6bsUWggr/DY3twtGoqDwskqonqmE8urIv2Mg7a6rrE0bpz8nN9X+5MGcRdzdjIh2+f7OtPagLw2/4g9OijOth5V7WDATJJawmtlMjiGSWgbRmkab2dzD9Si80pX7Mq1WIZSTnlBNzy41vyFPMycfGRuRQXXHvb3BGI45VGl1sz9v+ufXQ4BNGJK/3+z/Iwhf+iJ1Z+xfBNdAeo8z9Fwk3s9ZUENfXk6PCz1k68GzzOFDkOoKOLkCDQROrcY5ARAArNWq0tLF0fFmzvXZ6vf6aKhNjxh7q0LdKSUdjZVEjn8icNJVhEsHNuGHl2GsAT7ww1hg1XjTkfdg8oiGc8pHN2Anc+xU7GOCCOAsK3E6aQuJJFgVojzgdNe4RLKtYroc6wWVxSs+s4Yhu0HwockdPLIZvDXJZqOZPywdRg7oAB4HJI5ibW2SQ8Qz3gKR32jG3sfLfyVIoNbvGKErjbP84lF+tJfSZFjUNPLpjwcmVvSa+B8/yxi4riZn1Wvau2MeSHREUgR608t6Pcteq6VmBpqInzUodKd5Kp5Pods2X1DEv5pOQR/jkbTRwli2AVe9eQ5DdzsqWkcDA6iCULMVA8kqzyp2a4jb0PmvaIYQBgLu0cYkoyyuLCB/1a4Y4pwRfx/HoyX8OPeSBztY+G/8JFWxK+L8JiFiaCoPof561Y7WHveXTMkuFGg8Bqs+KKzgCGgb8H0Kn7qIdE5klH8INDjoaOEbVYqadTzUYhWW4DuJyeCALFlHo4CXTUdeu3rYSNrg5NbzUwLANhVZjVS0wmNQmPhGF/yknZofovloBZShZMtX/ZMGQgbotDkGhZm6sz42JyWM5WZJqyZ9m30avy2hWFqxzzdUIkYRxrM3hilMRrvGbr/GTVqovVR3HNXv9A6FjeFItFOYYaeppdYQFkVJLIZddE0dPNntq/SYU8AEQEAAYkCHwQYAQIACQUCTq3GOQIbDAAKCRC+WqoLohDAlfxTD/wJkOMFJwNYSD8KL1QUWpXHqJm6CbKJC7BQEdD+MpF2HLG+sxQOaNk3/Ra7TaiC1GEKbPpwH+kNBSUKVvasR8kjyM0Uoh+pQEs1gIXgFzxLO5p47wYegZyiMGagrKnVOv0356Er+IRFzmr58S3aBSxaxj/xO5aNeXzw/TKxoj9gk6FRSLq+aRQ1SbSM0ipGLjWf0Qq2Toy1PfW1kL75XqGG5IwBJnhlXEggWxA3lIRh4rgkBTR6ecE8wFevqBZLCeB32srUGPCl5Ich69rCm5Eitvs7R9/5boB0izAUUzbF1au21qJRd0uT5mYFDB6yT2FF+sOeUZuxvZmP8kvUDZLIfJSVlenKGq3Xv76EX7iXq/rs7/3fJk9md+NkehJ7yhqUj7PZplpjZY7LD7Pv2T84X6SOQw1pDuUmKxxUFw1vXCxqUGABTa9x75zekjjozSX4W31+uEgoS8Az0rVaL8YQg+gKixo3rKWr/D613qZR86cgy1F0uDrk3PTYYRuSDmzcp6IwEMq5MdYM+ayps4KWE88RO6cQck7uTJr4bbOPyJ+1HXGFKJ5ryLjYaN4lWkWzkSoZc//9+l9dbNm3eovjM2Phqn6CjY3T08zPsqGTnHbRmW/HXSKPkqQ4AMk8GQ/TeCQ95zQVS8vqnE5Q1k5tjtl1uQmzZKJiwDYcUi9Yhg=="
	noofbroadcastmsgs:=10000
	noofpeermsgs:=10000
	
	noofmessagestosend:=noofbroadcastmsgs+noofpeermsgs


	delaybeforeconn:=30000 * time.Millisecond
	
	
	for i:=0;i<numberofservers;i++ {
		id:=strconv.Itoa(i)
		ffnm := "serverlist" + id + ".xml"
		myservermainstruct[i]= New(id,sizeofinchan,sizeofoutchan,ffnm,delaybeforeconn)
		go Serverfunc(myservermainstruct[i],id,noofmessagestosend,numberofservers,sizeofinchan,sizeofoutchan,wg)	
		go myservermainstruct[i].Sendtooutbox(id, noofmessagestosend,broadcastmsg,peermsg,noofbroadcastmsgs,noofpeermsgs,numberofservers)
	}
	
	wg.Wait()

	if(actualtest(myservermainstruct)) {
		fmt.Println("Test Passed")
	}

	binary, lookErr := exec.LookPath("bash")
    	if lookErr != nil {
    	    panic(lookErr)
    	}
	
		

	args := []string{"bash", "mybash.sh"}
	env := os.Environ()
	
	
	execErr := syscall.Exec(binary, args, env)
    	if execErr != nil {
        	panic(execErr)
    	}
	
}

func testcase2() {
//func TestAllbroadcasts(t *testing.T) {	
	numberofservers:=0
	numberofservers,_=strconv.Atoi(os.Args[1])
	wg := new(sync.WaitGroup)
    	wg.Add(numberofservers)
	
	sizeofinchan:=20
	sizeofoutchan:=20

	//ffnm := "serverlist" + id + ".xml"
	//myservermainstruct := New(id,sizeofinchan,sizeooutchan,ffnm)
	//go myservermainstruct.Sendtooutbox(id, noofmessagestosend, numberofservers)
	myservermainstruct:=make([]Servermainstruct,numberofservers)
	
	//please start this broadcast string with string "BROADCAST" to get bash output right
	broadcastmsg:="BROADCAST"
	
	//please start this broadcast string with string "hello there" to get bash output right
	peermsg:="hello there"
	noofbroadcastmsgs:=10000
	noofpeermsgs:=0
	
	noofmessagestosend:=noofbroadcastmsgs+noofpeermsgs


	delaybeforeconn:=30000 * time.Millisecond
	
	
	for i:=0;i<numberofservers;i++ {
		id:=strconv.Itoa(i)
		ffnm := "serverlist" + id + ".xml"
		myservermainstruct[i]= New(id,sizeofinchan,sizeofoutchan,ffnm,delaybeforeconn)
		go Serverfunc(myservermainstruct[i],id,noofmessagestosend,numberofservers,sizeofinchan,sizeofoutchan,wg)	
		go myservermainstruct[i].Sendtooutbox(id, noofmessagestosend,broadcastmsg,peermsg,noofbroadcastmsgs,noofpeermsgs,numberofservers)
	}
	
	wg.Wait()

	
	if(actualtest(myservermainstruct)) {
		fmt.Println("Test Passed")
	}	

	binary, lookErr := exec.LookPath("bash")
    	if lookErr != nil {
    	    panic(lookErr)
    	}
	

	args := []string{"bash", "mybash.sh"}
	env := os.Environ()
	
	
	execErr := syscall.Exec(binary, args, env)
    	if execErr != nil {
        	panic(execErr)
    	}

}


func testcase3() {
//func TestRoundrobbin(t *testing.T) {	

	numberofservers:=0
	numberofservers,_=strconv.Atoi(os.Args[1])
	wg := new(sync.WaitGroup)
    	wg.Add(numberofservers)
	
	sizeofinchan:=20
	sizeofoutchan:=20

	//ffnm := "serverlist" + id + ".xml"
	//myservermainstruct := New(id,sizeofinchan,sizeooutchan,ffnm)
	//go myservermainstruct.Sendtooutbox(id, noofmessagestosend, numberofservers)
	myservermainstruct:=make([]Servermainstruct,numberofservers)
	
	//please start this broadcast string with string "BROADCAST" to get bash output right
	broadcastmsg:="BROADCAST"
	
	//please start this broadcast string with string "hello there" to get bash output right
	peermsg:="hello there"
	noofbroadcastmsgs:=10000
	noofpeermsgs:=10000
	
	noofmessagestosend:=noofbroadcastmsgs+noofpeermsgs


	delaybeforeconn:=30000 * time.Millisecond
	
	
	for i:=0;i<numberofservers;i++ {
		id:=strconv.Itoa(i)
		ffnm := "serverlist" + id + ".xml"
		myservermainstruct[i]= New(id,sizeofinchan,sizeofoutchan,ffnm,delaybeforeconn)
		go Serverfunc(myservermainstruct[i],id,noofmessagestosend,numberofservers,sizeofinchan,sizeofoutchan,wg)	
		go myservermainstruct[i].Sendtooutbox3(id, noofmessagestosend,broadcastmsg,peermsg,noofbroadcastmsgs,noofpeermsgs,numberofservers)
	}
	
	wg.Wait()

	if(actualtest(myservermainstruct)) {
		fmt.Println("Test Passed")
	}


	binary, lookErr := exec.LookPath("bash")
    	if lookErr != nil {
    	    panic(lookErr)
    	}
	

	args := []string{"bash", "mybash.sh"}
	env := os.Environ()
	
	
	execErr := syscall.Exec(binary, args, env)
    	if execErr != nil {
        	panic(execErr)
    	}


}


func testcase4() {
//func TestBroadcastwithonenotstarted(t *testing.T) {	

	numberofservers:=0
	numberofservers,_=strconv.Atoi(os.Args[1])
	wg := new(sync.WaitGroup)
    	wg.Add(numberofservers)
	
	sizeofinchan:=20
	sizeofoutchan:=20

	//ffnm := "serverlist" + id + ".xml"
	//myservermainstruct := New(id,sizeofinchan,sizeooutchan,ffnm)
	//go myservermainstruct.Sendtooutbox(id, noofmessagestosend, numberofservers)
	myservermainstruct:=make([]Servermainstruct,numberofservers)
	
	//please start this broadcast string with string "BROADCAST" to get bash output right
	broadcastmsg:="BROADCAST"
	
	//please start this broadcast string with string "hello there" to get bash output right
	peermsg:="hello there"
	noofbroadcastmsgs:=10000
	noofpeermsgs:=10000
	
	noofmessagestosend:=noofbroadcastmsgs+noofpeermsgs


	delaybeforeconn:=30000 * time.Millisecond
	
	i:=0
	for i=0;i<numberofservers;i++ {
		id:=strconv.Itoa(i)
		ffnm := "serverlist" + id + ".xml"
		myservermainstruct[i]= New(id,sizeofinchan,sizeofoutchan,ffnm,delaybeforeconn)
		go Serverfunc(myservermainstruct[i],id,noofmessagestosend,numberofservers,sizeofinchan,sizeofoutchan,wg)	
		go myservermainstruct[i].Sendtooutbox(id, noofmessagestosend,broadcastmsg,peermsg,noofbroadcastmsgs,noofpeermsgs,numberofservers)
		if(i==numberofservers-2) {
			time.Sleep(100000*time.Millisecond)
		}
	}
	

	wg.Wait()

	if(actualtest(myservermainstruct)) {
		fmt.Println("Test Passed")
	}


	binary, lookErr := exec.LookPath("bash")
    	if lookErr != nil {
    	    panic(lookErr)
    	}
	

	args := []string{"bash", "mybash.sh"}
	env := os.Environ()
	
	
	execErr := syscall.Exec(binary, args, env)
    	if execErr != nil {
        	panic(execErr)
    	}



}
